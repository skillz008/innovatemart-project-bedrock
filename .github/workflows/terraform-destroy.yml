name: Destroy Infrastructure
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  destroy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Check Terraform State
      id: check_state
      run: |
        if terraform state list >/dev/null 2>&1; then
          echo "state_exists=true" >> $GITHUB_OUTPUT
          echo "Resources in state:"
          terraform state list
        else
          echo "state_exists=false" >> $GITHUB_OUTPUT
          echo "No Terraform state found"
        fi

    - name: Terraform Plan (Dry Run)
      id: plan
      if: steps.check_state.outputs.state_exists == 'true'
      run: terraform plan -destroy

    - name: Terraform Destroy
      id: destroy
      if: steps.check_state.outputs.state_exists == 'true'
      run: terraform destroy -auto-approve
      env:
        TF_VAR_rds_orders_username: ${{ secrets.RDS_ORDERS_USERNAME }}
        TF_VAR_rds_orders_password: ${{ secrets.RDS_ORDERS_PASSWORD }}
        TF_VAR_rds_catalog_username: ${{ secrets.RDS_CATALOG_USERNAME }}
        TF_VAR_rds_catalog_password: ${{ secrets.RDS_CATALOG_PASSWORD }}

    - name: Check if Resources Exist in AWS
      if: steps.check_state.outputs.state_exists == 'false'
      run: |
        echo "Checking for existing resources in AWS..."
        
        # Check for EKS cluster
        if aws eks list-clusters --query "clusters" --output text | grep -q "${VAR_PROJECT_NAME}"; then
          echo "WARNING: EKS cluster exists but not in Terraform state"
        else
          echo "✓ No EKS clusters found"
        fi
        
        # Check for VPC
        if aws ec2 describe-vpcs --filters "Name=tag:Project,Values=${VAR_PROJECT_NAME}" --query "Vpcs[].VpcId" --output text | grep -q "vpc-"; then
          echo "WARNING: VPC exists but not in Terraform state"
        else
          echo "✓ No VPCs found with project tags"
        fi
        
        # Check for RDS instances
        if aws rds describe-db-instances --query "DBInstances[?contains(DBInstanceIdentifier, '${VAR_PROJECT_NAME}')].DBInstanceIdentifier" --output text | grep -q "db-"; then
          echo "WARNING: RDS instances exist but not in Terraform state"
        else
          echo "✓ No RDS instances found"
        fi
        
        # Check for DynamoDB tables
        if aws dynamodb list-tables --query "TableNames[?contains(@, '${VAR_PROJECT_NAME}')]" --output text | grep -q "Carts"; then
          echo "WARNING: DynamoDB tables exist but not in Terraform state"
        else
          echo "✓ No DynamoDB tables found"
        fi
      env:
        VAR_PROJECT_NAME: ${{ vars.PROJECT_NAME || 'innovatemart-bedrock' }}

    - name: Handle Missing State
      if: steps.check_state.outputs.state_exists == 'false'
      run: |
        echo "::warning::No Terraform state found. This could mean:"
        echo "1. Infrastructure was never created with Terraform"
        echo "2. Infrastructure was already destroyed"
        echo "3. Terraform state file is missing"
        echo ""
        echo "If you need to destroy manually, check the AWS console for remaining resources."

    - name: Final Verification
      run: |
        echo "=== Destruction Summary ==="
        if [ "${{ steps.check_state.outputs.state_exists }}" = "true" ]; then
          echo "✓ Terraform destroy completed"
          echo "✓ State file was present and processed"
        else
          echo "⚠ No Terraform state found - manual verification required"
          echo "Please check AWS console for any remaining resources"
        fi
