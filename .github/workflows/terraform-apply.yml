name: 'Terraform Apply'
on:
  push:
    branches: [ "main" ]
    paths:
      - 'terraform/**'

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'

      - name: Import existing AWS resources
        run: |
          terraform import aws_dynamodb_table.carts innovatemart-bedrock-Carts
          terraform import aws_iam_user.developer_ro innovatemart-bedrock-developer-ro
          terraform import aws_kms_alias.cluster arn:aws:kms:us-east-1:039367376953:alias/eks/innovatemart-bedrock-cluster
          terraform import aws_cloudwatch_log_group.this /aws/eks/innovatemart-bedrock-cluster/cluster
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply (EKS only)
        run: terraform apply -target=aws_eks_cluster.main -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # --- ACM staged apply workaround starts here ---
      - name: Terraform Apply (ACM certificate only)
        run: terraform apply -target=aws_acm_certificate.main -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Refresh (ensure ACM cert state is updated)
        run: terraform refresh
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply (ACM DNS validation only)
        run: terraform apply -target=aws_route53_record.acm_validation -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      # --- ACM staged apply workaround ends here ---

      - name: Configure kubeconfig for EKS
        run: aws eks update-kubeconfig --region us-east-1 --name innovatemart-bedrock-cluster
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply (all resources)
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply (final convergence)
        run: terraform apply -auto-approve -input=false
        working-directory: ./terraform
        env:
          TF_CLI_ARGS: '-no-color'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
