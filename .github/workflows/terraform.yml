name: 'Terraform CI/CD'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.5.0'
  TF_WORKING_DIR: 'terraform'

jobs:
  terraform:
    name: 'Terraform Plan & Apply'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive ${{ env.TF_WORKING_DIR }}/
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init ${{ env.TF_WORKING_DIR }}/

    - name: Terraform Validate
      id: validate
      run: terraform validate ${{ env.TF_WORKING_DIR }}/

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform plan -no-color -input=false -out=tfplan
      continue-on-error: true

    - name: Terraform Plan Status
      if: github.event_name == 'pull_request'
      run: |
        if [ "${{ steps.plan.outcome }}" != "success" ]; then
          echo "Terraform plan failed"
          exit 1
        fi

    - name: Update Pull Request with Plan
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && steps.plan.outcome == 'success'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ \`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}*`;

          // Delete previous comments to avoid clutter
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          for (const comment of comments) {
            if (comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }

          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform apply -auto-approve -input=false

    - name: Update Kubernetes Deployment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Get cluster info from Terraform output
        cd ${{ env.TF_WORKING_DIR }}
        CLUSTER_NAME=$(terraform output -raw cluster_id)
        AWS_REGION=$(terraform output -raw aws_region)
        
        # Update kubeconfig
        aws eks update-kubeconfig --region $AWS_REGION --name $CLUSTER_NAME
        
        # Deploy/update Kubernetes manifests
        cd ../kubernetes
        kubectl apply -f retail-store-app.yaml
        kubectl apply -f ingress.yaml
        
        # Wait for deployment to complete
        kubectl wait --for=condition=ready pod --all --timeout=600s
        
        # Get application URL
        ALB_URL=$(kubectl get ingress retail-store-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "PENDING")
        echo "Application URL: http://$ALB_URL"

    - name: Notify Deployment Status
      if: always() && github.ref == 'refs/heads/main'
      uses: actions/github-script@v6
      with:
        script: |
          const deploymentStatus = '${{ job.status }}';
          const actor = '${{ github.actor }}';
          const commitMsg = '${{ github.event.head_commit.message }}';
          const sha = '${{ github.sha }}'.substring(0, 7);
          
          let message = '';
          let color = 'good';
          
          if (deploymentStatus === 'success') {
            message = `‚úÖ Terraform deployment completed successfully!\n\n`;
            message += `**Commit:** ${commitMsg}\n`;
            message += `**Deployed by:** ${actor}\n`;
            message += `**SHA:** ${sha}\n`;
            
            // Get application URL if available
            message += `**Application URL:** http://${{ steps.deploy.outputs.alb_url || 'PENDING' }}\n`;
          } else {
            message = `‚ùå Terraform deployment failed!\n\n`;
            message += `**Commit:** ${commitMsg}\n`;
            message += `**Deployed by:** ${actor}\n`;
            message += `**SHA:** ${sha}\n`;
            color = 'danger';
          }
          
          // Create a deployment status comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          });
