name: 'Terraform CI/CD'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: 'us-east-1'
  TERRAFORM_VERSION: '1.5.0'
  TF_WORKING_DIR: 'terraform'

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Setup Kubernetes tools
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Terraform Format
      id: fmt
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} init

    - name: Terraform Validate
      id: validate
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} plan -no-color -input=false
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          try {
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          } catch (error) {
            console.log('Could not create comment. This is expected for PRs from forks.');
          }

    - name: Full Deployment (Infrastructure + Application)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        chmod +x scripts/deploy.sh
        ./scripts/deploy.sh

    - name: Upload Deployment Logs
      if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: actions/upload-artifact@v4
      with:
        name: deployment-logs
        path: |
          deployment.log
        retention-days: 1
